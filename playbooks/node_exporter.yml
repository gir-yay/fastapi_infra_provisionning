- name: Secure Node Exporter Installation
  hosts: "{{ target_host }}"
  become: yes

  tasks:
    - name: Download Node Exporter
      get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v1.9.1/node_exporter-1.9.1.linux-amd64.tar.gz
        dest: /tmp/node_exporter.tar.gz

    - name: Extract Node Exporter
      unarchive:
        src: /tmp/node_exporter.tar.gz
        dest: /tmp/
        remote_src: yes

    - name: Copy binary to /usr/local/bin
      copy:
        remote_src: yes
        src: /tmp/node_exporter-1.9.1.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        mode: '0755'

    - name: Create node_exporter user
      user:
        name: node_exporter
        shell: /bin/false
        create_home: no
        system: yes

    - name: Set binary ownership
      file:
        path: /usr/local/bin/node_exporter
        owner: node_exporter
        group: node_exporter

    - name: Create systemd service file
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=node_exporter
          Group=node_exporter
          Type=simple
          ExecStart=/usr/local/bin/node_exporter

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Enable and start Node Exporter
      systemd:
        name: node_exporter
        enabled: yes
        state: started


    - name: Run cAdvisor container
      community.docker.docker_container:
        name: cadvisor
        image: gcr.io/cadvisor/cadvisor:latest
        privileged: true
        devices:
          - "/dev/kmsg:/dev/kmsg"
        volumes:
          - "/:/rootfs:ro"
          - "/var/run:/var/run:ro"
          - "/sys:/sys:ro"
          - "/var/lib/docker/:/var/lib/docker:ro"
          - "/dev/disk/:/dev/disk:ro"
        published_ports:
          - "8080:8080"
        restart_policy: always
        state: started
